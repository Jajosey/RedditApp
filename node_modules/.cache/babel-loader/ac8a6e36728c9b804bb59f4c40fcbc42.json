{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\fortressapp\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Reddit from \"./components/Reddit\";\n\nconst App = () => {\n  const [resource, setResource] = useState([]); //TODO:  fix CORS error\n\n  useEffect(() => {\n    let uri = \"https://www.reddit.com/r/ProgrammerHumor.json?limit=20\";\n\n    if (uri) {\n      fetch(uri).then(response => {\n        return response.json();\n      }).then(response => {\n        //TODO:  deconstruct data\n        //TODO:  condense to either one or a couple values...currying???(removepostarray.removedataarray.parsedataarray)\n        console.log(\"raw response \", response); //console.log('first children data ', response.data.children)\n        //  const parsedPostArray = responseToPostArray(response);\n\n        const postArray = removePostArray(response); //an array of nothing but the data objects\n\n        const postDataArray = removeDataArray(postArray);\n        const parsedDataArray = parseDataArray(postDataArray);\n        const sortedDataArray = sortDataArray(parsedDataArray);\n        console.log(\"parsed data array! \", sortedDataArray); //  console.log(\"postArray \", postDataArray);\n\n        setResource(sortedDataArray);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    const removePostArray = response => {\n      return response.data.children;\n    }; //for each object in the array, only get the data field\n\n\n    const removeDataArray = postArray => {\n      const dataArray = postArray.map(post => {\n        return post.data;\n      });\n      return dataArray;\n    };\n\n    const parseDataArray = postDataArray => {\n      //TODO:  all shorter hand?\n      const parsedData = postDataArray.map(post => ({\n        author: post.author,\n        title: post.title,\n        num_comments: post.num_comments,\n        permalink: post.permalink,\n        ups: post.ups,\n        downs: post.downs,\n        score: post.score\n      }));\n      return parsedData;\n    }; // sort the array in descending order based on comments\n\n\n    const sortDataArray = arrayToSort => {\n      return arrayToSort.sort((userA, userB) => userB.num_comments - userA.num_comments);\n    };\n  }, []); // const destructureFunc = (object) =>{\n  //   return const {title, author, permalink, ups, downs} = object.data\n  // }\n  // {resource.map((object, index) => (\n  //   <div>\n  //   <p key={index}>TITLE:  {object.data.title}</p>\n  //   <p key={index}>AUTHOR:  {object.data.author}</p>\n  //   <p key={index}>AUTHOR FULL NAME:   {object.data.permalink}</p>\n  //   <p key={index}>UP VOTES? {object.data.ups}</p>\n  //   <p key={index}>DOWN VOTES? {object.data.downs}</p>\n  //   <p key={index}>NUMBER OF COMMENTS:  {object.data.num_comments}</p>\n  //   </div>\n  // ))}\n\n  return React.createElement(\"div\", {\n    className: \"ui container comments\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Reddit, {\n    redditData: resource,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["F:/Work/fortressapp/src/App.js"],"names":["React","useEffect","useState","Reddit","App","resource","setResource","uri","fetch","then","response","json","console","log","postArray","removePostArray","postDataArray","removeDataArray","parsedDataArray","parseDataArray","sortedDataArray","sortDataArray","catch","error","data","children","dataArray","map","post","parsedData","author","title","num_comments","permalink","ups","downs","score","arrayToSort","sort","userA","userB"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC,CADgB,CAEhB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,GAAG,GAAG,wDAAV;;AACA,QAAIA,GAAJ,EAAS;AACPC,MAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACQC,QAAQ,IAAI;AAChB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQC,QAAQ,IAAI;AAChB;AACA;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,QAA7B,EAHgB,CAIhB;AACA;;AACA,cAAMI,SAAS,GAAGC,eAAe,CAACL,QAAD,CAAjC,CANgB,CAOhB;;AACA,cAAMM,aAAa,GAAGC,eAAe,CAACH,SAAD,CAArC;AACA,cAAMI,eAAe,GAAGC,cAAc,CAACH,aAAD,CAAtC;AACA,cAAMI,eAAe,GAAGC,aAAa,CAACH,eAAD,CAArC;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCO,eAAnC,EAXgB,CAYhB;;AAEAd,QAAAA,WAAW,CAACc,eAAD,CAAX;AAED,OApBH,EAqBGE,KArBH,CAqBSC,KAAK,IAAI;AACdX,QAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD,OAvBH;AAwBD;;AACD,UAAMR,eAAe,GAAGL,QAAQ,IAAI;AAClC,aAAOA,QAAQ,CAACc,IAAT,CAAcC,QAArB;AACD,KAFD,CA5Bc,CAgCd;;;AACA,UAAMR,eAAe,GAAGH,SAAS,IAAI;AACnC,YAAMY,SAAS,GAAGZ,SAAS,CAACa,GAAV,CAAcC,IAAI,IAAI;AACtC,eAAOA,IAAI,CAACJ,IAAZ;AACD,OAFiB,CAAlB;AAGA,aAAOE,SAAP;AACD,KALD;;AAOA,UAAMP,cAAc,GAAGH,aAAa,IAAI;AACtC;AACA,YAAMa,UAAU,GAAGb,aAAa,CAACW,GAAd,CAAkBC,IAAI,KAAK;AAC5CE,QAAAA,MAAM,EAAEF,IAAI,CAACE,MAD+B;AAE5CC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAFgC;AAG5CC,QAAAA,YAAY,EAAEJ,IAAI,CAACI,YAHyB;AAI5CC,QAAAA,SAAS,EAAEL,IAAI,CAACK,SAJ4B;AAK5CC,QAAAA,GAAG,EAAEN,IAAI,CAACM,GALkC;AAM5CC,QAAAA,KAAK,EAAEP,IAAI,CAACO,KANgC;AAO5CC,QAAAA,KAAK,EAAER,IAAI,CAACQ;AAPgC,OAAL,CAAtB,CAAnB;AASA,aAAOP,UAAP;AACD,KAZD,CAxCc,CAsDd;;;AACA,UAAMR,aAAa,GAAGgB,WAAW,IAAI;AACnC,aAAOA,WAAW,CAACC,IAAZ,CACL,CAACC,KAAD,EAAQC,KAAR,KAAkBA,KAAK,CAACR,YAAN,GAAqBO,KAAK,CAACP,YADxC,CAAP;AAGD,KAJD;AAKD,GA5DQ,EA4DN,EA5DM,CAAT,CAHgB,CAiEhB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,UAAU,EAAE3B,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD,CAvFD;;AAyFA,eAAeD,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Reddit from \"./components/Reddit\";\r\n\r\nconst App = () => {\r\n  const [resource, setResource] = useState([]);\r\n  //TODO:  fix CORS error\r\n  useEffect(() => {\r\n    let uri = \"https://www.reddit.com/r/ProgrammerHumor.json?limit=20\";\r\n    if (uri) {\r\n      fetch(uri)\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(response => {\r\n          //TODO:  deconstruct data\r\n          //TODO:  condense to either one or a couple values...currying???(removepostarray.removedataarray.parsedataarray)\r\n          console.log(\"raw response \", response);\r\n          //console.log('first children data ', response.data.children)\r\n          //  const parsedPostArray = responseToPostArray(response);\r\n          const postArray = removePostArray(response);\r\n          //an array of nothing but the data objects\r\n          const postDataArray = removeDataArray(postArray);\r\n          const parsedDataArray = parseDataArray(postDataArray);\r\n          const sortedDataArray = sortDataArray(parsedDataArray);\r\n          console.log(\"parsed data array! \", sortedDataArray);\r\n          //  console.log(\"postArray \", postDataArray);\r\n\r\n          setResource(sortedDataArray);\r\n\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n    const removePostArray = response => {\r\n      return response.data.children;\r\n    };\r\n\r\n    //for each object in the array, only get the data field\r\n    const removeDataArray = postArray => {\r\n      const dataArray = postArray.map(post => {\r\n        return post.data;\r\n      });\r\n      return dataArray;\r\n    };\r\n\r\n    const parseDataArray = postDataArray => {\r\n      //TODO:  all shorter hand?\r\n      const parsedData = postDataArray.map(post => ({\r\n        author: post.author,\r\n        title: post.title,\r\n        num_comments: post.num_comments,\r\n        permalink: post.permalink,\r\n        ups: post.ups,\r\n        downs: post.downs,\r\n        score: post.score\r\n      }));\r\n      return parsedData;\r\n    };\r\n\r\n    // sort the array in descending order based on comments\r\n    const sortDataArray = arrayToSort => {\r\n      return arrayToSort.sort(\r\n        (userA, userB) => userB.num_comments - userA.num_comments\r\n      );\r\n    };\r\n  }, []);\r\n\r\n  // const destructureFunc = (object) =>{\r\n  //   return const {title, author, permalink, ups, downs} = object.data\r\n  // }\r\n\r\n  // {resource.map((object, index) => (\r\n  //   <div>\r\n  //   <p key={index}>TITLE:  {object.data.title}</p>\r\n  //   <p key={index}>AUTHOR:  {object.data.author}</p>\r\n  //   <p key={index}>AUTHOR FULL NAME:   {object.data.permalink}</p>\r\n  //   <p key={index}>UP VOTES? {object.data.ups}</p>\r\n  //   <p key={index}>DOWN VOTES? {object.data.downs}</p>\r\n  //   <p key={index}>NUMBER OF COMMENTS:  {object.data.num_comments}</p>\r\n  //   </div>\r\n  // ))}\r\n\r\n  return (\r\n    <div className=\"ui container comments\">\r\n      <div>\r\n        <Reddit redditData={resource} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}