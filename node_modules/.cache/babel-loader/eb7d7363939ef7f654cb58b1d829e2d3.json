{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\fortressapp\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Reddit from \"./components/Reddit\";\n\nconst App = () => {\n  const [resource, setResource] = useState([]); //TODO:  fix CORS error\n\n  useEffect(() => {\n    let uri = \"https://www.reddit.com/r/ProgrammerHumor.json?limit=20\";\n\n    if (uri) {\n      fetch(uri).then(response => {\n        return response.json();\n      }).then(response => {\n        //TODO:  deconstruct data\n        console.log('raw response ', response); //console.log('first children data ', response.data.children)\n        //  const parsedPostArray = responseToPostArray(response);\n\n        const postArray = removePostArray(response);\n        console.log('postArray ', postArray);\n        setResource(postArray); // for (let element of data.data.children) {\n        //   console.log(\"number of comments\", element.data.num_comments);\n        //   console.log(\"title \", element.data.title);\n        //   console.log(\"author's full name \", element.data.author_fullname);\n        //   console.log(\"upvotes???? \", element.data.ups);\n        //   console.log(\"downvotes???? \", element.data.downs);\n        // }\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    const removePostArray = response => {\n      return response.data.children;\n    }; //stores each post as an element in an array\n\n\n    const responseToPostArray = responses => {\n      //TODO:  use map instead of forEach?\n      const postArray = [];\n      responses.forEach(response => {\n        postArray.push(...response.data.children);\n      }); //destructure\n\n      let statsByPost = {};\n      postArray.forEach(({\n        data: {\n          author,\n          title,\n          num_comments,\n          author_fullname,\n          ups,\n          downs\n        }\n      }) => {\n        statsByPost[author] = author;\n        statsByPost[title] = title;\n        statsByPost[num_comments] = num_comments;\n        statsByPost[author_fullname] = author_fullname;\n        statsByPost[ups] = ups;\n        statsByPost[downs] = downs;\n      });\n      const postList = Object.keys(statsByPost).map(postName => ({\n        author: statsByPost[postName].author,\n        title: statsByPost[postName].title,\n        num_commments: statsByPost[postName].num_comments,\n        author_fullname: statsByPost[postName].author_fullname,\n        ups: statsByPost[postName].ups,\n        downs: statsByPost[postName].downs\n      }));\n      console.log(postList);\n    }; //   axios\n    //     .get(uri)\n    //     .then(function(response) {\n    //       console.log(response);\n    //          for (let element of data.data.children) {\n    //        console.log(\"number of comments\", element.data.num_comments);\n    //            console.log(\"title \", element.data.title);\n    //            console.log(\"author's full name \", element.data.author_fullname);\n    //            console.log('upvotes???? ', element.data.ups );\n    //            console.log('downvotes???? ', element.data.downs )\n    //          }\n    //         })\n    //     .catch(function(error) {\n    //       console.log(error);\n    //     });\n\n  }, []); // const destructureFunc = (object) =>{\n  //   return const {title, author, author_fullName, ups, downs} = object.data\n  // }\n  // {resource.map((object, index) => (\n  //   <div>\n  //   <p key={index}>TITLE:  {object.data.title}</p>\n  //   <p key={index}>AUTHOR:  {object.data.author}</p>\n  //   <p key={index}>AUTHOR FULL NAME:   {object.data.author_fullname}</p>\n  //   <p key={index}>UP VOTES? {object.data.ups}</p>\n  //   <p key={index}>DOWN VOTES? {object.data.downs}</p>\n  //   <p key={index}>NUMBER OF COMMENTS:  {object.data.num_comments}</p>\n  //   </div>\n  // ))}\n\n  return (//https://www.reddit.com/r/ProgrammerHumor/comments/f9t20e/me_as_a_project_manager/\n    //author full name used in url:  f9t20e\n    React.createElement(\"div\", {\n      className: \"ui container comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Reddit, {\n      redditData: resource,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })))\n  );\n};\n\nexport default App;","map":{"version":3,"sources":["F:/Work/fortressapp/src/App.js"],"names":["React","useEffect","useState","Reddit","App","resource","setResource","uri","fetch","then","response","json","console","log","postArray","removePostArray","catch","error","data","children","responseToPostArray","responses","forEach","push","statsByPost","author","title","num_comments","author_fullname","ups","downs","postList","Object","keys","map","postName","num_commments"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC,CADgB,CAEhB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,GAAG,GAAG,wDAAV;;AACA,QAAIA,GAAJ,EAAS;AACPC,MAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACQC,QAAQ,IAAI;AAChB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQC,QAAQ,IAAI;AAChB;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,QAA7B,EAFgB,CAGhB;AACF;;AACA,cAAMI,SAAS,GAAGC,eAAe,CAACL,QAAD,CAAjC;AAEAE,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,SAA1B;AAEER,QAAAA,WAAW,CAACQ,SAAD,CAAX,CATgB,CAUhB;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OArBH,EAsBGE,KAtBH,CAsBSC,KAAK,IAAI;AACdL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD,OAxBH;AAyBD;;AACD,UAAMF,eAAe,GAAGL,QAAQ,IAAG;AACjC,aAAOA,QAAQ,CAACQ,IAAT,CAAcC,QAArB;AACD,KAFD,CA7Bc,CAkCd;;;AACA,UAAMC,mBAAmB,GAAGC,SAAS,IAAI;AACvC;AACA,YAAMP,SAAS,GAAG,EAAlB;AAEAO,MAAAA,SAAS,CAACC,OAAV,CAAkBZ,QAAQ,IAAI;AAC5BI,QAAAA,SAAS,CAACS,IAAV,CAAe,GAAGb,QAAQ,CAACQ,IAAT,CAAcC,QAAhC;AACD,OAFD,EAJuC,CAQvC;;AACA,UAAIK,WAAW,GAAG,EAAlB;AACAV,MAAAA,SAAS,CAACQ,OAAV,CACE,CAAC;AACCJ,QAAAA,IAAI,EAAE;AAAEO,UAAAA,MAAF;AAAUC,UAAAA,KAAV;AAAiBC,UAAAA,YAAjB;AAA+BC,UAAAA,eAA/B;AAAgDC,UAAAA,GAAhD;AAAqDC,UAAAA;AAArD;AADP,OAAD,KAEM;AACJN,QAAAA,WAAW,CAACC,MAAD,CAAX,GAAsBA,MAAtB;AACAD,QAAAA,WAAW,CAACE,KAAD,CAAX,GAAqBA,KAArB;AACAF,QAAAA,WAAW,CAACG,YAAD,CAAX,GAA4BA,YAA5B;AACAH,QAAAA,WAAW,CAACI,eAAD,CAAX,GAA+BA,eAA/B;AACAJ,QAAAA,WAAW,CAACK,GAAD,CAAX,GAAmBA,GAAnB;AACAL,QAAAA,WAAW,CAACM,KAAD,CAAX,GAAqBA,KAArB;AACD,OAVH;AAaA,YAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYT,WAAZ,EAAyBU,GAAzB,CAA6BC,QAAQ,KAAK;AACzDV,QAAAA,MAAM,EAAED,WAAW,CAACW,QAAD,CAAX,CAAsBV,MAD2B;AAEzDC,QAAAA,KAAK,EAAEF,WAAW,CAACW,QAAD,CAAX,CAAsBT,KAF4B;AAGzDU,QAAAA,aAAa,EAAEZ,WAAW,CAACW,QAAD,CAAX,CAAsBR,YAHoB;AAIzDC,QAAAA,eAAe,EAAEJ,WAAW,CAACW,QAAD,CAAX,CAAsBP,eAJkB;AAKzDC,QAAAA,GAAG,EAAEL,WAAW,CAACW,QAAD,CAAX,CAAsBN,GAL8B;AAMzDC,QAAAA,KAAK,EAAEN,WAAW,CAACW,QAAD,CAAX,CAAsBL;AAN4B,OAAL,CAArC,CAAjB;AASAlB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,QAAZ;AACD,KAjCD,CAnCc,CAsEd;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,GAtFQ,EAsFN,EAtFM,CAAT,CAHgB,CA2FhB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACE;AACA;AACA;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,UAAU,EAAE1B,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAHF;AASD,CAnHD;;AAqHA,eAAeD,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Reddit from \"./components/Reddit\";\r\n\r\nconst App = () => {\r\n  const [resource, setResource] = useState([]);\r\n  //TODO:  fix CORS error\r\n  useEffect(() => {\r\n    let uri = \"https://www.reddit.com/r/ProgrammerHumor.json?limit=20\";\r\n    if (uri) {\r\n      fetch(uri)\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(response => {\r\n          //TODO:  deconstruct data\r\n          console.log('raw response ', response)\r\n          //console.log('first children data ', response.data.children)\r\n        //  const parsedPostArray = responseToPostArray(response);\r\n        const postArray = removePostArray(response);\r\n\r\n        console.log('postArray ', postArray)\r\n\r\n          setResource(postArray);\r\n          // for (let element of data.data.children) {\r\n          //   console.log(\"number of comments\", element.data.num_comments);\r\n          //   console.log(\"title \", element.data.title);\r\n          //   console.log(\"author's full name \", element.data.author_fullname);\r\n          //   console.log(\"upvotes???? \", element.data.ups);\r\n          //   console.log(\"downvotes???? \", element.data.downs);\r\n          // }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n    const removePostArray = response =>{\r\n      return response.data.children;\r\n    }\r\n\r\n\r\n    //stores each post as an element in an array\r\n    const responseToPostArray = responses => {\r\n      //TODO:  use map instead of forEach?\r\n      const postArray = [];\r\n\r\n      responses.forEach(response => {\r\n        postArray.push(...response.data.children);\r\n      });\r\n\r\n      //destructure\r\n      let statsByPost = {};\r\n      postArray.forEach(\r\n        ({\r\n          data: { author, title, num_comments, author_fullname, ups, downs }\r\n        }) => {\r\n          statsByPost[author] = author;\r\n          statsByPost[title] = title;\r\n          statsByPost[num_comments] = num_comments;\r\n          statsByPost[author_fullname] = author_fullname;\r\n          statsByPost[ups] = ups;\r\n          statsByPost[downs] = downs;\r\n        }\r\n      );\r\n\r\n      const postList = Object.keys(statsByPost).map(postName => ({\r\n        author: statsByPost[postName].author,\r\n        title: statsByPost[postName].title,\r\n        num_commments: statsByPost[postName].num_comments,\r\n        author_fullname: statsByPost[postName].author_fullname,\r\n        ups: statsByPost[postName].ups,\r\n        downs: statsByPost[postName].downs\r\n      }));\r\n\r\n      console.log(postList);\r\n    };\r\n\r\n    //   axios\r\n    //     .get(uri)\r\n    //     .then(function(response) {\r\n    //       console.log(response);\r\n    //          for (let element of data.data.children) {\r\n\r\n    //        console.log(\"number of comments\", element.data.num_comments);\r\n    //            console.log(\"title \", element.data.title);\r\n    //            console.log(\"author's full name \", element.data.author_fullname);\r\n    //            console.log('upvotes???? ', element.data.ups );\r\n    //            console.log('downvotes???? ', element.data.downs )\r\n    //          }\r\n    //         })\r\n    //     .catch(function(error) {\r\n    //       console.log(error);\r\n    //     });\r\n  }, []);\r\n\r\n  // const destructureFunc = (object) =>{\r\n  //   return const {title, author, author_fullName, ups, downs} = object.data\r\n  // }\r\n\r\n  // {resource.map((object, index) => (\r\n  //   <div>\r\n  //   <p key={index}>TITLE:  {object.data.title}</p>\r\n  //   <p key={index}>AUTHOR:  {object.data.author}</p>\r\n  //   <p key={index}>AUTHOR FULL NAME:   {object.data.author_fullname}</p>\r\n  //   <p key={index}>UP VOTES? {object.data.ups}</p>\r\n  //   <p key={index}>DOWN VOTES? {object.data.downs}</p>\r\n  //   <p key={index}>NUMBER OF COMMENTS:  {object.data.num_comments}</p>\r\n  //   </div>\r\n  // ))}\r\n\r\n  return (\r\n    //https://www.reddit.com/r/ProgrammerHumor/comments/f9t20e/me_as_a_project_manager/\r\n    //author full name used in url:  f9t20e\r\n    <div className=\"ui container comments\">\r\n      <div>\r\n        <Reddit redditData={resource} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}