{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\fortressapp\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Reddit from \"./components/Reddit/Reddit\";\nimport { removePostArray, removeDataArray, parseDataArray, sortDataArray } from \"./transformations/transformations\";\nimport styled from \"styled-components\";\nconst ContainerDiv = styled.div``;\n\nconst App = () => {\n  const [resource, setResource] = useState([]);\n  useEffect(() => {\n    let uri = \"https://www.reddit.com/r/ProgrammerHumor.json?limit=20\";\n    fetch(uri).then(response => {\n      return response.json();\n    }).then(response => {\n      //sometimes I think this is more legible than chainging \n      //together a long string of parameterless calls\n      const postArray = removePostArray(response);\n      const postDataArray = removeDataArray(postArray);\n      const parsedDataArray = parseDataArray(postDataArray);\n      const sortedDataArray = sortDataArray(parsedDataArray);\n      setResource(sortedDataArray);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  return React.createElement(ContainerDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Reddit, {\n    redditData: resource,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["F:/Work/fortressapp/src/App.js"],"names":["React","useEffect","useState","Reddit","removePostArray","removeDataArray","parseDataArray","sortDataArray","styled","ContainerDiv","div","App","resource","setResource","uri","fetch","then","response","json","postArray","postDataArray","parsedDataArray","sortedDataArray","catch","error","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,cAHF,EAIEC,aAJF,QAKO,mCALP;AAMA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,YAAY,GAAGD,MAAM,CAACE,GAAI,EAAhC;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,GAAG,GAAG,wDAAV;AAEAC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACQC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHH,EAIGF,IAJH,CAIQC,QAAQ,IAAI;AAEhB;AACA;AACA,YAAME,SAAS,GAAGf,eAAe,CAACa,QAAD,CAAjC;AACA,YAAMG,aAAa,GAAGf,eAAe,CAACc,SAAD,CAArC;AACA,YAAME,eAAe,GAAGf,cAAc,CAACc,aAAD,CAAtC;AACA,YAAME,eAAe,GAAGf,aAAa,CAACc,eAAD,CAArC;AAEAR,MAAAA,WAAW,CAACS,eAAD,CAAX;AACD,KAdH,EAeGC,KAfH,CAeSC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAjBH;AAkBD,GArBQ,EAqBN,EArBM,CAAT;AAuBA,SACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,UAAU,EAAEZ,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD,CAhCD;;AAkCA,eAAeD,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Reddit from \"./components/Reddit/Reddit\";\r\nimport {\r\n  removePostArray,\r\n  removeDataArray,\r\n  parseDataArray,\r\n  sortDataArray\r\n} from \"./transformations/transformations\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ContainerDiv = styled.div``;\r\n\r\nconst App = () => {\r\n  const [resource, setResource] = useState([]);\r\n  useEffect(() => {\r\n    let uri = \"https://www.reddit.com/r/ProgrammerHumor.json?limit=20\";\r\n\r\n    fetch(uri)\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(response => {\r\n\r\n        //sometimes I think this is more legible than chainging \r\n        //together a long string of parameterless calls\r\n        const postArray = removePostArray(response);\r\n        const postDataArray = removeDataArray(postArray);\r\n        const parsedDataArray = parseDataArray(postDataArray);\r\n        const sortedDataArray = sortDataArray(parsedDataArray);\r\n\r\n        setResource(sortedDataArray);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <ContainerDiv>\r\n      <div>\r\n        <Reddit redditData={resource} />\r\n      </div>\r\n    </ContainerDiv>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}