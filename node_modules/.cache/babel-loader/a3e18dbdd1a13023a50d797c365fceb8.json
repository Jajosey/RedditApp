{"ast":null,"code":"var _jsxFileName = \"F:\\\\Work\\\\fortressapp\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Reddit from \"./components/Reddit\";\n\nconst App = () => {\n  const [resource, setResource] = useState([]); //TODO:  fix CORS error\n\n  useEffect(() => {\n    let uri = \"https://www.reddit.com/r/ProgrammerHumor.json?limit=20\";\n\n    if (uri) {\n      fetch(uri).then(response => {\n        return response.json();\n      }).then(response => {\n        //TODO:  deconstruct data\n        //TODO:  condense to either one or a couple values...currying???(removepostarray.removedataarray.parsedataarray)\n        console.log(\"raw response \", response); //console.log('first children data ', response.data.children)\n        //  const parsedPostArray = responseToPostArray(response);\n\n        const postArray = removePostArray(response); //an array of nothing but the data objects\n\n        const postDataArray = removeDataArray(postArray);\n        const parsedDataArray = parseDataArray(postDataArray);\n        const sortedDataArray = sortDataArray(parsedDataArray);\n        console.log(\"parsed data array! \", parsedDataArray); //  console.log(\"postArray \", postDataArray);\n\n        setResource(parsedDataArray); // for (let element of data.data.children) {\n        //   console.log(\"number of comments\", element.data.num_comments);\n        //   console.log(\"title \", element.data.title);\n        //   console.log(\"author's full name \", element.data.permalink);\n        //   console.log(\"upvotes???? \", element.data.ups);\n        //   console.log(\"downvotes???? \", element.data.downs);\n        // }\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    const removePostArray = response => {\n      return response.data.children;\n    }; //for each object in the array, only get the data field\n\n\n    const removeDataArray = postArray => {\n      const dataArray = postArray.map(post => {\n        return post.data;\n      });\n      return dataArray;\n    };\n\n    const parseDataArray = postDataArray => {\n      //TODO:  all shorter hand?\n      const parsedData = postDataArray.map(post => ({\n        author: post.author,\n        title: post.title,\n        num_comments: post.num_comments,\n        permalink: post.permalink,\n        ups: post.ups,\n        downs: post.downs,\n        score: post.score\n      }));\n      return parsedData;\n    };\n\n    const sortDataArray = arrayToSort => {\n      arrayToSort.sort((userA, userB) => userB.num_comments - userA.num_comments);\n    }; // console.log('post data array ', postDataArray)\n    // postDataArray.forEach(\n    //   ({\n    //     data: { author, title, num_comments, permalink, ups, downs }\n    //   }) => {\n    //     statsByPost.author = author;\n    //     statsByPost[title] = title;\n    //     statsByPost[num_comments] = num_comments;\n    //     statsByPost[permalink] = permalink;\n    //     statsByPost[ups] = ups;\n    //     statsByPost[downs] = downs;\n    //   }\n    // );\n    //stores each post as an element in an array\n\n\n    const responseToPostArray = responses => {\n      //TODO:  use map instead of forEach?\n      const postArray = [];\n      responses.forEach(response => {\n        postArray.push(...response.data.children);\n      }); //destructure\n\n      let statsByPost = {};\n      postArray.forEach(({\n        data: {\n          author,\n          title,\n          num_comments,\n          permalink,\n          ups,\n          downs\n        }\n      }) => {\n        statsByPost[author] = author;\n        statsByPost[title] = title;\n        statsByPost[num_comments] = num_comments;\n        statsByPost[permalink] = permalink;\n        statsByPost[ups] = ups;\n        statsByPost[downs] = downs;\n      });\n      const postList = Object.keys(statsByPost).map(postName => ({\n        author: statsByPost[postName].author,\n        title: statsByPost[postName].title,\n        num_commments: statsByPost[postName].num_comments,\n        permalink: statsByPost[postName].permalink,\n        ups: statsByPost[postName].ups,\n        downs: statsByPost[postName].downs\n      }));\n    }; //   axios\n    //     .get(uri)\n    //     .then(function(response) {\n    //       console.log(response);\n    //          for (let element of data.data.children) {\n    //        console.log(\"number of comments\", element.data.num_comments);\n    //            console.log(\"title \", element.data.title);\n    //            console.log(\"author's full name \", element.data.permalink);\n    //            console.log('upvotes???? ', element.data.ups );\n    //            console.log('downvotes???? ', element.data.downs )\n    //          }\n    //         })\n    //     .catch(function(error) {\n    //       console.log(error);\n    //     });\n\n  }, []); // const destructureFunc = (object) =>{\n  //   return const {title, author, permalink, ups, downs} = object.data\n  // }\n  // {resource.map((object, index) => (\n  //   <div>\n  //   <p key={index}>TITLE:  {object.data.title}</p>\n  //   <p key={index}>AUTHOR:  {object.data.author}</p>\n  //   <p key={index}>AUTHOR FULL NAME:   {object.data.permalink}</p>\n  //   <p key={index}>UP VOTES? {object.data.ups}</p>\n  //   <p key={index}>DOWN VOTES? {object.data.downs}</p>\n  //   <p key={index}>NUMBER OF COMMENTS:  {object.data.num_comments}</p>\n  //   </div>\n  // ))}\n\n  return (//https://www.reddit.com/r/ProgrammerHumor/comments/f9t20e/me_as_a_project_manager/\n    //author full name used in url:  f9t20e\n    React.createElement(\"div\", {\n      className: \"ui container comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Reddit, {\n      redditData: resource,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })))\n  );\n};\n\nexport default App;","map":{"version":3,"sources":["F:/Work/fortressapp/src/App.js"],"names":["React","useEffect","useState","Reddit","App","resource","setResource","uri","fetch","then","response","json","console","log","postArray","removePostArray","postDataArray","removeDataArray","parsedDataArray","parseDataArray","sortedDataArray","sortDataArray","catch","error","data","children","dataArray","map","post","parsedData","author","title","num_comments","permalink","ups","downs","score","arrayToSort","sort","userA","userB","responseToPostArray","responses","forEach","push","statsByPost","postList","Object","keys","postName","num_commments"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Reddit from \"./components/Reddit\";\r\n\r\nconst App = () => {\r\n  const [resource, setResource] = useState([]);\r\n  //TODO:  fix CORS error\r\n  useEffect(() => {\r\n    let uri = \"https://www.reddit.com/r/ProgrammerHumor.json?limit=20\";\r\n    if (uri) {\r\n      fetch(uri)\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(response => {\r\n          //TODO:  deconstruct data\r\n          //TODO:  condense to either one or a couple values...currying???(removepostarray.removedataarray.parsedataarray)\r\n          console.log(\"raw response \", response);\r\n          //console.log('first children data ', response.data.children)\r\n          //  const parsedPostArray = responseToPostArray(response);\r\n          const postArray = removePostArray(response);\r\n          //an array of nothing but the data objects\r\n          const postDataArray = removeDataArray(postArray);\r\n          const parsedDataArray = parseDataArray(postDataArray);\r\n          const sortedDataArray = sortDataArray(parsedDataArray);\r\n          console.log(\"parsed data array! \", parsedDataArray);\r\n          //  console.log(\"postArray \", postDataArray);\r\n\r\n          setResource(parsedDataArray);\r\n          // for (let element of data.data.children) {\r\n          //   console.log(\"number of comments\", element.data.num_comments);\r\n          //   console.log(\"title \", element.data.title);\r\n          //   console.log(\"author's full name \", element.data.permalink);\r\n          //   console.log(\"upvotes???? \", element.data.ups);\r\n          //   console.log(\"downvotes???? \", element.data.downs);\r\n          // }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n    const removePostArray = response => {\r\n      return response.data.children;\r\n    };\r\n\r\n    //for each object in the array, only get the data field\r\n    const removeDataArray = postArray => {\r\n      const dataArray = postArray.map(post => {\r\n        return post.data;\r\n      });\r\n      return dataArray;\r\n    };\r\n\r\n    const parseDataArray = postDataArray => {\r\n      //TODO:  all shorter hand?\r\n      const parsedData = postDataArray.map(post => ({\r\n        author: post.author,\r\n        title: post.title,\r\n        num_comments: post.num_comments,\r\n        permalink: post.permalink,\r\n        ups: post.ups,\r\n        downs: post.downs,\r\n        score: post.score\r\n      }));\r\n      return parsedData;\r\n    };\r\n\r\n    const sortDataArray = arrayToSort =>{\r\n      arrayToSort.sort((userA, userB) => userB.num_comments - userA.num_comments)\r\n    }\r\n    // console.log('post data array ', postDataArray)\r\n    // postDataArray.forEach(\r\n    //   ({\r\n    //     data: { author, title, num_comments, permalink, ups, downs }\r\n    //   }) => {\r\n    //     statsByPost.author = author;\r\n    //     statsByPost[title] = title;\r\n    //     statsByPost[num_comments] = num_comments;\r\n    //     statsByPost[permalink] = permalink;\r\n    //     statsByPost[ups] = ups;\r\n    //     statsByPost[downs] = downs;\r\n    //   }\r\n    // );\r\n\r\n    //stores each post as an element in an array\r\n    const responseToPostArray = responses => {\r\n      //TODO:  use map instead of forEach?\r\n      const postArray = [];\r\n\r\n      responses.forEach(response => {\r\n        postArray.push(...response.data.children);\r\n      });\r\n\r\n      //destructure\r\n      let statsByPost = {};\r\n      postArray.forEach(\r\n        ({ data: { author, title, num_comments, permalink, ups, downs } }) => {\r\n          statsByPost[author] = author;\r\n          statsByPost[title] = title;\r\n          statsByPost[num_comments] = num_comments;\r\n          statsByPost[permalink] = permalink;\r\n          statsByPost[ups] = ups;\r\n          statsByPost[downs] = downs;\r\n        }\r\n      );\r\n\r\n      const postList = Object.keys(statsByPost).map(postName => ({\r\n        author: statsByPost[postName].author,\r\n        title: statsByPost[postName].title,\r\n        num_commments: statsByPost[postName].num_comments,\r\n        permalink: statsByPost[postName].permalink,\r\n        ups: statsByPost[postName].ups,\r\n        downs: statsByPost[postName].downs\r\n      }));\r\n    };\r\n\r\n    //   axios\r\n    //     .get(uri)\r\n    //     .then(function(response) {\r\n    //       console.log(response);\r\n    //          for (let element of data.data.children) {\r\n\r\n    //        console.log(\"number of comments\", element.data.num_comments);\r\n    //            console.log(\"title \", element.data.title);\r\n    //            console.log(\"author's full name \", element.data.permalink);\r\n    //            console.log('upvotes???? ', element.data.ups );\r\n    //            console.log('downvotes???? ', element.data.downs )\r\n    //          }\r\n    //         })\r\n    //     .catch(function(error) {\r\n    //       console.log(error);\r\n    //     });\r\n  }, []);\r\n\r\n  // const destructureFunc = (object) =>{\r\n  //   return const {title, author, permalink, ups, downs} = object.data\r\n  // }\r\n\r\n  // {resource.map((object, index) => (\r\n  //   <div>\r\n  //   <p key={index}>TITLE:  {object.data.title}</p>\r\n  //   <p key={index}>AUTHOR:  {object.data.author}</p>\r\n  //   <p key={index}>AUTHOR FULL NAME:   {object.data.permalink}</p>\r\n  //   <p key={index}>UP VOTES? {object.data.ups}</p>\r\n  //   <p key={index}>DOWN VOTES? {object.data.downs}</p>\r\n  //   <p key={index}>NUMBER OF COMMENTS:  {object.data.num_comments}</p>\r\n  //   </div>\r\n  // ))}\r\n\r\n  return (\r\n    //https://www.reddit.com/r/ProgrammerHumor/comments/f9t20e/me_as_a_project_manager/\r\n    //author full name used in url:  f9t20e\r\n    <div className=\"ui container comments\">\r\n      <div>\r\n        <Reddit redditData={resource} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}